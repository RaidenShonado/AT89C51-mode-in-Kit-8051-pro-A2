C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 01:16:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <AT89X52.h>
   2          #include "delay/delay.h"
*** WARNING C318 IN LINE 2 OF main.c: can't open file 'delay/delay.h'
   3          
   4          #define LED1    P3_0  // LED 7-segment 1
   5          #define LED2    P3_1  // LED 7-segment 2
   6          #define LED3    P3_2  // LED 7-segment 3
   7          #define LED4    P3_3  // LED 7-segment 4
   8          
   9          #define LED_PORT    P2  // C?ng di?u khi?n 7-segment
  10          
  11          #define BT1        P1_6  // Switch 1
  12          #define SPEAK      P1_7  // Switch 2
  13          
  14          unsigned char index;
  15          unsigned char led7_data[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; // Decimal to 
             -Led7seg
  16          
  17          unsigned char key_value;
  18          bit start = 0;
  19          unsigned int num_product;
  20          unsigned int num_count = 0;
  21          unsigned char chuc_1, dv_1, chuc_2, dv_2;
  22          unsigned char num_time = 0;
  23          signed char time_led = 61;
  24          
  25          #define R1    P1_0
  26          #define Y1    P1_1
  27          #define G1    P1_2
  28          #define R2    P1_3
  29          #define Y2    P1_4
  30          #define G2    P1_5
  31          
  32          //------------------------------------------------
  33          void main()
  34          {
  35   1          unsigned char j = 0;
  36   1      
  37   1          // Timer configuration
  38   1          TMOD = 0x11; // Timer 0 and 1 in mode 1 (16-bit)
  39   1          TL0 = -50000 % 256;
  40   1          TH0 = -50000 / 256;
  41   1          TF0 = 1;
  42   1          TR0 = 1;
  43   1          TH1 = -5000 / 256;
  44   1          TL1 = -5000 % 256;
  45   1          TF1 = 0;
  46   1          TR1 = 1;
  47   1          EA = 1; // Enable global interrupt
  48   1          ET1 = 1; // Enable Timer 1 interrupt
  49   1          IT1 = 1;
  50   1          ET0 = 1;
  51   1      
  52   1          while (1)
  53   1          {
C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 01:16:09 PAGE 2   

  54   2              if (SPEAK == 0) // When P1.7 is low, switch to manual control
  55   2              {
  56   3                  // Turn off all LEDs and counters
  57   3                  R1 = 0; Y1 = 0; G1 = 0;
  58   3                  R2 = 0; Y2 = 0; G2 = 0;
  59   3                  LED1 = 0; LED2 = 0; LED3 = 0; LED4 = 0;
  60   3      
  61   3                  // Check the state of P1.6 for LED control
  62   3                  if (BT1 == 1) // When P1.6 is high
  63   3                  {
  64   4                      R1 = 1; G2 = 1; // Turn on R1 and G2
  65   4                  }
  66   3                  else // When P1.6 is low
  67   3                  {
  68   4                      R2 = 1; G1 = 1; // Turn on R2 and G1
  69   4                  }
  70   3              }
  71   2              else
  72   2              {
  73   3                  // Original LED and timer logic
  74   3                  if (time_led > 33)
  75   3                  {
  76   4                      R1 = 1; Y1 = 0; G1 = 0;
  77   4                      R2 = 0; Y2 = 0; G2 = 1;
  78   4                      chuc_1 = (time_led - 31) / 10;
  79   4                      dv_1 = (time_led - 31) % 10;
  80   4                      chuc_2 = (time_led - 34) / 10;
  81   4                      dv_2 = (time_led - 34) % 10;
  82   4                  }
  83   3                  else if ((time_led <= 33) && (time_led > 30))
  84   3                  {
  85   4                      R1 = 1; Y1 = 0; G1 = 0;
  86   4                      R2 = 0; Y2 = 1; G2 = 0;
  87   4                      chuc_1 = (time_led - 31) / 10;
  88   4                      dv_1 = (time_led - 31) % 10;
  89   4                      chuc_2 = (time_led - 31) / 10;
  90   4                      dv_2 = (time_led - 31) % 10;
  91   4                  }
  92   3                  else if ((time_led <= 30) && (time_led >= 3))
  93   3                  {
  94   4                      R1 = 0; Y1 = 0; G1 = 1;
  95   4                      R2 = 1; Y2 = 0; G2 = 0;
  96   4                      chuc_1 = (time_led - 3) / 10;
  97   4                      dv_1 = (time_led - 3) % 10;
  98   4                      chuc_2 = (time_led - 0) / 10;
  99   4                      dv_2 = (time_led - 0) % 10;
 100   4                  }
 101   3                  else if ((time_led < 3) && (time_led >= 0))
 102   3                  {
 103   4                      R1 = 0; Y1 = 1; G1 = 0;
 104   4                      R2 = 1; Y2 = 0; G2 = 0;
 105   4                      chuc_1 = (time_led) / 10;
 106   4                      dv_1 = (time_led) % 10;
 107   4                      chuc_2 = (time_led) / 10;
 108   4                      dv_2 = (time_led) % 10;
 109   4                  }
 110   3              }
 111   2          }
 112   1      }
 113          
 114          /* Timer 0 interrupt service routine */
 115          void T0_ISR(void) interrupt 1
C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 01:16:09 PAGE 3   

 116          {
 117   1          TR0 = 0; // Stop Timer 0
 118   1          TF0 = 0; // Clear overflow flag
 119   1          TL0 = -50000 % 256; // Reload Timer 0
 120   1          TH0 = -50000 / 256;
 121   1      
 122   1          num_time++;
 123   1          if (num_time == 20)
 124   1          {
 125   2              num_time = 0;
 126   2              time_led--;
 127   2              if (time_led < 0)
 128   2                  time_led = 61; // Reset time_led
 129   2          }
 130   1      
 131   1          TR0 = 1; // Restart Timer 0
 132   1      }
 133          
 134          /* Timer 1 interrupt service routine */
 135          void T1_ISR(void) interrupt 3 // Using Timer 1 to scan LEDs
 136          {
 137   1          TR1 = 0; // Stop Timer 1
 138   1          TF1 = 0; // Clear overflow flag
 139   1          TH1 = -5000 / 256; // Reload Timer 1
 140   1          TL1 = -5000 % 256;
 141   1          index++;
 142   1          LED1 = 0; LED2 = 0; LED3 = 0; LED4 = 0;
 143   1      
 144   1          if (index == 1)
 145   1          {
 146   2              LED1 = 1; // Activate first LED
 147   2              LED_PORT = led7_data[chuc_1]; // Display first digit
 148   2          }
 149   1          else if (index == 2)
 150   1          {
 151   2              LED2 = 1; // Activate second LED
 152   2              LED_PORT = led7_data[dv_1]; // Display second digit
 153   2          }
 154   1          else if (index == 3)
 155   1          {
 156   2              LED3 = 1; // Activate third LED
 157   2              LED_PORT = led7_data[chuc_2]; // Display third digit
 158   2          }
 159   1          else if (index == 4)
 160   1          {
 161   2              LED4 = 1; // Activate fourth LED
 162   2              LED_PORT = led7_data[dv_2]; // Display fourth digit
 163   2              index = 0; // Reset index
 164   2          }
 165   1      
 166   1          TR1 = 1; // Restart Timer 1
 167   1      }
 168          
 169          /* External interrupt 1 service routine */
 170          void IT1_ISR(void) interrupt 2
 171          {
 172   1          num_count++;
 173   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    566    ----
C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 01:16:09 PAGE 4   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
